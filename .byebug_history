c
should validate_absence_of(:first_name)
should validate_presence_of(:first_name)
c
contact
joe
jane
c
contact
joe
c
@contact.errors.full_messages
@contact.error.full_messages
c
@contact.valid?
@contact.valid
@contact
c
mobile_phone.errors.full_messages
n
mobile_phone
n
Phone.last
n
contact
c
@contact.errors.messages[:first_name].first
@contact.errors.messages[:first_name]
@contact.errors.full_messages.first
@contact.errors.full_messages
@contact.errors.messages
@contact.errors.messages[:first_name]
@contact.errors.messages
@contact.errors
@contact.errors.
@contact.errors.full_messages
@contact.errors.any?
@contact.valid?
c
@contact.errors.any?
@contact.errors
@contact.errors[:first_name]
c
@contact.errors[:first_name]
c
@contact.errors.full_messages
@contact.error
@contact.errors
@contact.errors[:firstname]
c
@contact.errors.messages[:first_name]
@contact.errors.messages
@contact
@contact.errors
@contact.errors.
@contact.errors.messages
@contact.errors.messages[:first_name]
@contact.error.messages[:first_name]
c
expect( @contact.errors.messages[:first_name]).not_to include("can't be blank")
c
@contact.errors.messages[:first_name]
@contact.errors.messages
@contact.errors.messages[:firstname]
expect( @contact.errors.messages[:first_name]).not_to include("First name can't be blank")
c
@contact.errors.messages[:first_name]
@contact.errors.messages[:first_ame]
@contact.errors.messages
@contact.errors[:messages]
@contact.errors
@contact.valid?
c
@contact.name
@contact.valid?
expect(@contact.name).to eq 'John Doe'
c
 should validate_absence_of(:first_name)
n
c
@contact
should validate_presence_of(:first_name)
@contact.valid?
c
contact.phones.last
contact.phones.first
contact.phones 
contact.phones << FactoryGirl.build(:phone,phone_type: phone ,contact:contact)
contact.phone << FactoryGirl.build(:phone,phone_type: phone ,contact:contact)
contact.phones << FactoryGirl.build(:phone,phone_type: phone ,contact:contact)
contact.phones
c
@contact.valid?
c
@contact.errors.full_messagesc
@contact.errors.full_messages
@contact.errors[:firstname]
@contact.errors
@contact.valid?
c
expect(@contact.errors[:first_name]).to include('Cannot be blank')
expect(@contact.errors[:first_name]).not_to include('Cannot be blank')
@contact.valid?
@contact
c
expect(@contact.errors[:first_name]).to include('Cannot be blank')
expect(@contact.errors[:first_name])
expect(@contact.errors[:first_name]).to include('Cannot be blank')
n
c
expect(@contact.errors[:first_name]).not_to include('Cannot be blank')
 expect(@contact.errors[:first_name]).not_to include('Cannot be blank')
@contact.valid?
@contact
c
build(:contact).valid?
build(:contact)
expect(build(:contact)).to
build(:contact)
